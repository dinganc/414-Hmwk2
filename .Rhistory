baseplot + geom_point()
baseplotcolor <- ggplot(data=diamonds, aes(x=carat, y=price, colour=color))
baseplotcolor + geom_point(size=3, alpha=1)
baseplotcolor + geom_point(size=0.7, alpha=0.3) + scale_y_log10()
baseplotcolor + geom_point(size=0.7, alpha=0.3) + facet_wrap(~ cut)
ggplot(data=diamonds, aes(x=color)) + geom_bar()
ggplot(data=diamonds, aes(x=color, y = price/carat, colour=color)) + geom_jitter(alpha = 0.25)
baseplotcolor + geom_smooth()
baseplotcolor + geom_smooth() + geom_point()
baseplotcolor + geom_point(size=1.5, alpha=0.25) + geom_smooth()
library("maps") #Assuming this is installed, otherwise install first
USStates <- map_data("state")
arrests <- USArrests #Create a copy
names(arrests) <- tolower(names(arrests)) #Converts column name to lower case
arrests$region <- tolower(rownames(USArrests)) #Same for row names
# Merge the map data with the arrests data based on region
arrestsbyregion <- merge(USStates, arrests, sort = FALSE, by = "region")
arrestsbyregion <- arrestsbyregion[order(arrestsbyregion$order), ]
# Plot a map, filling in the states based on murder rate
ggplot(data=arrestsbyregion, aes(x=long, y=lat, group=group, fill=murder)) + geom_polygon()
ggplot(data=arrestsbyregion, aes(x=long, y=lat, group=group, fill=murder)) + geom_polygon() +
scale_fill_gradient(low = "#FF0000", high = "#0000FF")
ggsave(filename = "mychart.jpg")
library("dplyr"); library("nycflights13")
library("dplyr"); library("nycflights13")
filter(flights, month == 1, day == 1)  #Criteria Combined using AND
filter(flights, month == 1 | month == 2) #Using OR
slice(flights, 1:10)
arrange(flights, year, month, day) #Sorting in Ascending Order
arrange(flights, desc(arr_delay)) #Descending Order
select(flights, year, month, day)
select(flights, year:day) #Inclusive of limits
select(flights, -(year:day)) #Excluding all columns named
rename(flights, tail_num = tailnum)
rename(flights, tail_num = tailnum)
distinct(select(flights, tailnum))
distinct(select(flights, origin, dest)) #All unqiue routes
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$dep_time)
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_grid(~time.of.day+origin,)
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$dep_time)
ploting=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day))
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_grid(~time.of.day+origin,)
View(ploting)
View(ploting)
mutate(flights, gain = arr_delay - dep_delay, speed = distance / air_time * 60)
mutate(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60) #You can refer to variables you just created
)
transmute(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60) #Only keep the new variables
)
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
sample_n(flights, 10) #Fixed number of samples
sample_frac(flights, 0.01) #Fixed fraction of samples
by_tailnum <- group_by(flights, tailnum)
delaydata <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
filtereddelay <- filter(delaydata, count > 20, dist < 2000)
ggplot(filtereddelay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) + geom_smooth()
destinations <- group_by(flights, dest)
summarise(destinations,
planes = n_distinct(tailnum),
flights = n())
flights %>%
group_by(year, month, day) %>%
select(arr_delay, dep_delay) %>%
summarise(
arr = mean(arr_delay, na.rm = TRUE),
dep = mean(dep_delay, na.rm = TRUE)
) %>%
filter(arr > 30 | dep > 30)
View(ploting)
View(ploting)
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_grid(~time.of.day+origin,ncol=4)
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_wrap(~time.of.day+origin,ncol=4)
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_wrap(~origin+time.of.day,ncol=4)
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
group_by(bike,gender)
group_by(bike,gender)%>%select(gender)
group_by(bike,gender)%>%select(gender)%>%distinct()
library(geosphere)#for calculating distance
install.packages("geosphere")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
library(geosphere)#for calculating distance
mutate(bike,geo_distance=distm (c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)
mutate(bike,geo_distance=distm (c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[0]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1][1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine))
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1][1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine)[1])
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1][1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine)[1])
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1][1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine)[1][1])
library(geosphere)#for calculating distance
int(distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1])
library(geosphere)#for calculating distance
distm (c(40.8, -74), c(52, 63), fun = distHaversine)[1]
mutate(bike,geo_distance=distm(c(start.station.longitude, start.station.latitude), c(end.station.longitude, end.station.latitude), fun = distHaversine)[1][1])
nrow(bike[bike$gender=="1",])/nrow(bike[bike$gender=="1"|bike[bike$gender=="2",])
nrow(bike[bike$gender=="1",])/nrow(bike[(bike$gender=="1"|bike[bike$gender=="2"),])
nrow(bike[bike$gender=="1",])/nrow(bike[(bike$gender=="1"|bike[bike$gender=="2"),])
nrow(bike[bike$gender=="1",])/nrow(bike[(bike$gender=="1"|bike[bike$gender=="2"),])
nrow(bike[bike$gender=="1",])/nrow(bike[(bike$gender=="1"|bike$gender=="2"),])
nrow(filter(bike,gender=1))
nrow(filter(bike,gender==1))
nrow(filter(bike,gender==1,usertype=="Subscriber"))
nrow(filter(bike,gender==1,usertype=="Subscriber"))/nrow(filter(bike,usertype=="Subscriber"))
unknown=1-fem_sub_portion-m_sub_portion
fem_sub_portion=nrow(filter(bike,gender==1,usertype=="Subscriber"))/nrow(filter(bike,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==2,usertype=="Subscriber"))/nrow(filter(bike,usertype=="Subscriber"))
unknown=1-fem_sub_portion-m_sub_portion
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
library("dplyr")
bike=read.csv("citibike.csv")
library("dplyr")
bike=read.csv("citibike.csv")
library("dplyr")
bike=read.csv("citibike.csv")
library("dplyr")
bike=read.csv("citibike.csv")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
bike=read.csv("citibike.csv")
fem_sub_portion=nrow(filter(bike,gender==1,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==2,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown")
fem_sub_portion=nrow(filter(bike,gender==2,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==1,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown")
fem_sub_portion=nrow(filter(bike,gender==2,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==1,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown")
View(bike)
View(bike)
strftime("2/1/2015 0:01",'%A')
strftime("2/1/2015 0:01",'%A')
mutate(bike,weekday=strftime(starttime,'%A'))
strftime("2/1/2015 0:01",'%A')
mutate(bike,weekday=strftime(char(starttime),'%A'))
strftime("2/1/2015 0:01",'%A')
mutate(bike,weekday=strftime(nchar(starttime),'%A'))
strftime("2/1/2015 0:01",'%A')
mutate(bike,weekday=strftime(as.Date(starttime),'%A'))
View(bike)
strftime("2/1/2015 0:01",'%A')
mutate(bike,weekday=strftime(as.Date(starttime),'%A'))->bike
View(bike)
fem_sub_portion=nrow(filter(bike,gender==2,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==1,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown")
fem_sub_portion=nrow(filter(bike,gender==2))#,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==1))#,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0))#,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown")
fem_sub_portion=nrow(filter(bike,gender==2))#,usertype=="Subscriber"))
m_sub_portion=nrow(filter(bike,gender==1))#,usertype=="Subscriber"))
unknown=nrow(filter(bike,gender==0))#,usertype=="Subscriber"))
slices=c(fem_sub_portion,m_sub_portion,unknown)
label=c("Female","Male","Unspecified")
pie(slices,label,main="Rider Gender Breakdown including All User Type")
#populate day column
mutate(bike,weekday=strftime(as.Date(starttime),'%A'))->bike
barplot(select(group_by(bike,weekday),tripduration)
barplot(select(group_by(bike,weekday),tripduration))
select(group_by(bike,weekday),tripduration)
barplot(select(group_by(bike,weekday),tripduration))
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
nyc <- nycflights13::flights
nyc$airgain=nyc$dep_delay-nyc$arr_delay
average_airgain=mean(nyc$airgain,na.rm = TRUE)
average_airgain_by_carrier=tapply(nyc$airgain, nyc$carrier, mean,na.rm=TRUE)
average_airgain_by_carrier=sort(average_airgain_by_carrier,decreasing = FALSE)
average_airgain_by_carrier
barplot(average_airgain_by_carrier,cex.names=.75)
sort(tapply(nyc$arr_delay, nyc$origin, mean,na.rm=TRUE),decreasing = TRUE)
optimal_airport_by_month=function(month_int){
sort(tapply(nyc$arr_delay[nyc$month==month_int], nyc$origin[nyc$month==month_int], mean,na.rm=TRUE),decreasing = FALSE)[1]
}
optimal_june=optimal_airport_by_month(6)
average_delay_by_departing_time=function(departing_time_lower,departing_time_upper,dest_arp){
if (departing_time_upper>departing_time_lower)
{
tapply(nyc$arr_delay[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
nyc$month[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
mean,na.rm=TRUE)}
else {tapply(rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$arr_delay,
rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$month,
mean,na.rm=TRUE)}
}
morning_delay=average_delay_by_departing_time(400,1200,"ATL")
afternoon_delay=average_delay_by_departing_time(1200,1600,"ATL")
evening_delay=average_delay_by_departing_time(1600,2000,"ATL")
night_delay=average_delay_by_departing_time(2000,400,"ATL")
plot(morning_delay,col="blue",ylab="Delay in mintues",xlab="Month",ylim=c(-20,150))
points(afternoon_delay,col="red",ylab="",xaxt="n")
points(evening_delay,col="green",ylab="",xaxt="n")
points(night_delay,col="purple",ylab="",xaxt="n")
axis(1, at = seq(1, 12, by = 1), las=1)
legend(0.75,100,legend = c("Morning","Afternoon","Evening","Night"),col=c("blue","red","green","purple"),pch = 1,cex=.75)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
nyc <- nycflights13::flights
nyc$airgain=nyc$dep_delay-nyc$arr_delay
average_airgain=mean(nyc$airgain,na.rm = TRUE)
average_airgain_by_carrier=tapply(nyc$airgain, nyc$carrier, mean,na.rm=TRUE)
average_airgain_by_carrier=sort(average_airgain_by_carrier,decreasing = FALSE)
average_airgain_by_carrier
barplot(average_airgain_by_carrier,cex.names=.75)
sort(tapply(nyc$arr_delay, nyc$origin, mean,na.rm=TRUE),decreasing = TRUE)
optimal_airport_by_month=function(month_int){
sort(tapply(nyc$arr_delay[nyc$month==month_int], nyc$origin[nyc$month==month_int], mean,na.rm=TRUE),decreasing = FALSE)[1]
}
optimal_june=optimal_airport_by_month(6)
average_delay_by_departing_time=function(departing_time_lower,departing_time_upper,dest_arp){
if (departing_time_upper>departing_time_lower)
{
tapply(nyc$arr_delay[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
nyc$month[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
mean,na.rm=TRUE)}
else {tapply(rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$arr_delay,
rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$month,
mean,na.rm=TRUE)}
}
morning_delay=average_delay_by_departing_time(400,1200,"ATL")
afternoon_delay=average_delay_by_departing_time(1200,1600,"ATL")
evening_delay=average_delay_by_departing_time(1600,2000,"ATL")
night_delay=average_delay_by_departing_time(2000,400,"ATL")
plot(morning_delay,col="blue",ylab="Delay in mintues",xlab="Month",ylim=c(-20,150))
points(afternoon_delay,col="red",ylab="",xaxt="n")
points(evening_delay,col="green",ylab="",xaxt="n")
points(night_delay,col="purple",ylab="",xaxt="n")
axis(1, at = seq(1, 12, by = 1), las=1)
legend(0.75,100,legend = c("Morning","Afternoon","Evening","Night"),col=c("blue","red","green","purple"),pch = 1,cex=.75)
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$dep_time)
ploting=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day))
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_wrap(~origin+time.of.day,ncol=4)
View(nyc)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
nyc <- nycflights13::flights
nyc$airgain=nyc$dep_delay-nyc$arr_delay
average_airgain=mean(nyc$airgain,na.rm = TRUE)
average_airgain_by_carrier=tapply(nyc$airgain, nyc$carrier, mean,na.rm=TRUE)
average_airgain_by_carrier=sort(average_airgain_by_carrier,decreasing = FALSE)
average_airgain_by_carrier
barplot(average_airgain_by_carrier,cex.names=.75)
sort(tapply(nyc$arr_delay, nyc$origin, mean,na.rm=TRUE),decreasing = TRUE)
optimal_airport_by_month=function(month_int){
sort(tapply(nyc$arr_delay[nyc$month==month_int], nyc$origin[nyc$month==month_int], mean,na.rm=TRUE),decreasing = FALSE)[1]
}
optimal_june=optimal_airport_by_month(6)
average_delay_by_departing_time=function(departing_time_lower,departing_time_upper,dest_arp){
if (departing_time_upper>departing_time_lower)
{
tapply(nyc$arr_delay[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
nyc$month[nyc$dep_time>departing_time_lower &
nyc$dep_time<=departing_time_upper&nyc$dest==dest_arp],
mean,na.rm=TRUE)}
else {tapply(rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$arr_delay,
rbind(nyc[nyc$dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$dep_time<=departing_time_upper & nyc$dest==dest_arp,])$month,
mean,na.rm=TRUE)}
}
morning_delay=average_delay_by_departing_time(400,1200,"ATL")
afternoon_delay=average_delay_by_departing_time(1200,1600,"ATL")
evening_delay=average_delay_by_departing_time(1600,2000,"ATL")
night_delay=average_delay_by_departing_time(2000,400,"ATL")
plot(morning_delay,col="blue",ylab="Delay in mintues",xlab="Month",ylim=c(-20,150))
points(afternoon_delay,col="red",ylab="",xaxt="n")
points(evening_delay,col="green",ylab="",xaxt="n")
points(night_delay,col="purple",ylab="",xaxt="n")
axis(1, at = seq(1, 12, by = 1), las=1)
legend(0.75,100,legend = c("Morning","Afternoon","Evening","Night"),col=c("blue","red","green","purple"),pch = 1,cex=.75)
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$dep_time)
ploting=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day))
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_wrap(~origin+time.of.day,ncol=4)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
nyc <- nycflights13::flights
nyc$airgain=nyc$dep_delay-nyc$arr_delay
average_airgain=mean(nyc$airgain,na.rm = TRUE)
average_airgain_by_carrier=tapply(nyc$airgain, nyc$carrier, mean,na.rm=TRUE)
average_airgain_by_carrier=sort(average_airgain_by_carrier,decreasing = FALSE)
average_airgain_by_carrier
barplot(average_airgain_by_carrier,cex.names=.75)
sort(tapply(nyc$arr_delay, nyc$origin, mean,na.rm=TRUE),decreasing = TRUE)
optimal_airport_by_month=function(month_int){
sort(tapply(nyc$arr_delay[nyc$month==month_int], nyc$origin[nyc$month==month_int], mean,na.rm=TRUE),decreasing = FALSE)[1]
}
optimal_june=optimal_airport_by_month(6)
average_delay_by_departing_time=function(departing_time_lower,departing_time_upper,dest_arp){
if (departing_time_upper>departing_time_lower)
{
tapply(nyc$arr_delay[nyc$sched_departing_time>departing_time_lower &
nyc$sched_departing_time<=departing_time_upper&nyc$dest==dest_arp],
nyc$month[nyc$sched_departing_time>departing_time_lower &
nyc$sched_departing_time<=departing_time_upper&nyc$dest==dest_arp],
mean,na.rm=TRUE)}
else {tapply(rbind(nyc[nyc$sched_departing_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$sched_departing_time<=departing_time_upper & nyc$dest==dest_arp,])$arr_delay,
rbind(nyc[nyc$sched_departing_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$sched_departing_time<=departing_time_upper & nyc$dest==dest_arp,])$month,
mean,na.rm=TRUE)}
}
morning_delay=average_delay_by_departing_time(400,1200,"ATL")
afternoon_delay=average_delay_by_departing_time(1200,1600,"ATL")
evening_delay=average_delay_by_departing_time(1600,2000,"ATL")
night_delay=average_delay_by_departing_time(2000,400,"ATL")
plot(morning_delay,col="blue",ylab="Delay in mintues",xlab="Month",ylim=c(-20,150))
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$sched_departing_time)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
nyc <- nycflights13::flights
nyc$airgain=nyc$dep_delay-nyc$arr_delay
average_airgain=mean(nyc$airgain,na.rm = TRUE)
average_airgain_by_carrier=tapply(nyc$airgain, nyc$carrier, mean,na.rm=TRUE)
average_airgain_by_carrier=sort(average_airgain_by_carrier,decreasing = FALSE)
average_airgain_by_carrier
barplot(average_airgain_by_carrier,cex.names=.75)
sort(tapply(nyc$arr_delay, nyc$origin, mean,na.rm=TRUE),decreasing = TRUE)
optimal_airport_by_month=function(month_int){
sort(tapply(nyc$arr_delay[nyc$month==month_int], nyc$origin[nyc$month==month_int], mean,na.rm=TRUE),decreasing = FALSE)[1]
}
optimal_june=optimal_airport_by_month(6)
average_delay_by_departing_time=function(departing_time_lower,departing_time_upper,dest_arp){
if (departing_time_upper>departing_time_lower)
{
tapply(nyc$arr_delay[nyc$sched_dep_time>departing_time_lower &
nyc$sched_dep_time<=departing_time_upper&nyc$dest==dest_arp],
nyc$month[nyc$sched_dep_time>departing_time_lower &
nyc$sched_dep_time<=departing_time_upper&nyc$dest==dest_arp],
mean,na.rm=TRUE)}
else {tapply(rbind(nyc[nyc$sched_dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$sched_dep_time<=departing_time_upper & nyc$dest==dest_arp,])$arr_delay,
rbind(nyc[nyc$sched_dep_time>departing_time_lower & nyc$dest==dest_arp,],
nyc[nyc$sched_dep_time<=departing_time_upper & nyc$dest==dest_arp,])$month,
mean,na.rm=TRUE)}
}
morning_delay=average_delay_by_departing_time(400,1200,"ATL")
afternoon_delay=average_delay_by_departing_time(1200,1600,"ATL")
evening_delay=average_delay_by_departing_time(1600,2000,"ATL")
night_delay=average_delay_by_departing_time(2000,400,"ATL")
plot(morning_delay,col="blue",ylab="Delay in mintues",xlab="Month",ylim=c(-20,150))
points(afternoon_delay,col="red",ylab="",xaxt="n")
points(evening_delay,col="green",ylab="",xaxt="n")
points(night_delay,col="purple",ylab="",xaxt="n")
axis(1, at = seq(1, 12, by = 1), las=1)
legend(0.75,100,legend = c("Morning","Afternoon","Evening","Night"),col=c("blue","red","green","purple"),pch = 1,cex=.75)
library("ggplot2")
define_time_o_day=function(departing_time)
{
if (is.na(departing_time)){NA}
else
{
if (departing_time<=1200&departing_time>400){"Morning"}
else if (departing_time<=1600&departing_time>1200){"Afternoon"}
else if (departing_time<=2000&departing_time>1600){"Evening"}
else if (departing_time<=400) {"Night"}
else if (departing_time>2000) {"Night"}
}
}
v_def=Vectorize(define_time_o_day)
nyc$time.of.day=v_def(nyc$sched_dep_time)
ploting=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day))
ggplot(data=subset(nyc[,c("distance","airgain","origin","time.of.day")],!is.na(time.of.day)),aes(distance,airgain))+
geom_smooth()+
facet_wrap(~origin+time.of.day,ncol=4)
